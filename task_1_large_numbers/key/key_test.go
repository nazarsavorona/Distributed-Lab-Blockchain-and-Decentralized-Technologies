package key

import (
	"math/big"
	"reflect"
	"testing"
)

func TestKeySpace(t *testing.T) {
	tests := []struct {
		name string
		bits int64
		want string
	}{
		{
			name: "8 key",
			bits: 8,
			want: "256",
		},
		{
			name: "16 key",
			bits: 16,
			want: "65536",
		},
		{
			name: "32 key",
			bits: 32,
			want: "4294967296",
		},
		{
			name: "64 key",
			bits: 64,
			want: "18446744073709551616",
		},
		{
			name: "128 key",
			bits: 128,
			want: "340282366920938463463374607431768211456",
		},
		{
			name: "256 key",
			bits: 256,
			want: "115792089237316195423570985008687907853269984665640564039457584007913129639936",
		},
		{
			name: "512 key",
			bits: 512,
			want: "13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096",
		},
		{
			name: "1024 key",
			bits: 1024,
			want: "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216",
		},
		{
			name: "2048 key",
			bits: 2048,
			want: "32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656",
		},
		{
			name: "4096 key",
			bits: 4096,
			want: "1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085903001302413467189726673216491511131602920781738033436090243804708340403154190336",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := KeySpace(tt.bits).String(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("KeySpace() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestGenerateKey(t *testing.T) {
	tests := []struct {
		name       string
		bits       int64
		upperBound *big.Int
		wantErr    bool
		rounds     int
	}{
		{
			name:       "4 bits",
			bits:       4,
			upperBound: KeySpace(4),
			wantErr:    false,
			rounds:     10,
		},
		{
			name:       "128 bits",
			bits:       128,
			upperBound: KeySpace(128),
			wantErr:    false,
			rounds:     7,
		},
		{
			name:       "2048 bits",
			bits:       2048,
			upperBound: KeySpace(2048),
			wantErr:    false,
			rounds:     5,
		},
		{
			name:       "4096 bits",
			bits:       4096,
			upperBound: KeySpace(4096),
			wantErr:    false,
			rounds:     50,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			for i := 0; i < tt.rounds; i++ {
				got, err := GenerateKey(tt.bits)

				if (err != nil) != tt.wantErr {
					t.Errorf("GenerateKey() error = %v, wantErr %v", err, tt.wantErr)
					return
				}

				cmp := got.Cmp(tt.upperBound)
				// means that got must be less than upperBound
				want := -1

				if cmp != want {
					t.Errorf("GenerateKey() is greater than upper bound")
				}

				cmp = got.Cmp(big.NewInt(0))

				// means that got must be greater or equal to zero
				if cmp == -1 {
					t.Errorf("GenerateKey() is less than zero")
				}
			}
		})
	}
}
