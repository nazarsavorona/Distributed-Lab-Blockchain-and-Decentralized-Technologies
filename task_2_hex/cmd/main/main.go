package main

import (
	"fmt"
	"hex/hex"
	"log"
	"os"
)

func main() {
	f, err := os.Create("task_2_hex/output/hex_test_vectors.txt")

	if err != nil {
		log.Panicln(err)
	}

	defer func(f *os.File) {
		err = f.Close()

		if err != nil {
			log.Println(err)
		}
	}(f)

	vectors := []string{"0xff00000000000000000000000000000000000000000000000000000000000000",
		"0xaaaa000000000000000000000000000000000000000000000000000000000000",
		"0xFFFFFFFF",
		"0xF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
			"0000000000000000000000000000000000000000000000000000000000000000000000000000",
	}

	for _, vector := range vectors {
		var h *hex.Hex
		h, err = hex.NewHex(vector)

		if err != nil {
			log.Panicln(err)
		}

		var resultString string
		resultString += fmt.Sprintf("Value: %s\n", vector)
		bytesNumber := h.CountBytes()
		resultString += fmt.Sprintf("Number of bytes: %d\n", bytesNumber)
		littleEndian := h.ToLittleEndian()
		resultString += fmt.Sprintf("Little-endian: %v\n", littleEndian)
		bigEndian := h.ToBigEndian()
		resultString += fmt.Sprintf("Big-endian: %v\n", bigEndian)
		littleEndianHex := *hex.FromLittleEndianToHex(littleEndian)
		resultString += fmt.Sprintf("Hex from Little-endian: 0x%v\n", littleEndianHex)
		bigEndianHex := *hex.FromBigEndianToHex(bigEndian)
		resultString += fmt.Sprintf("Hex from Big-endian: 0x%v\n\n", bigEndianHex)

		_, err = f.WriteString(resultString)

		if err != nil {
			log.Panicln(err)
		}
	}
}
